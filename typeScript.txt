    Introduction To Typescript
TypeScript is JavaScript with added syntax for types that makes it static.
Why should I use TypeScript?
1)TypeScript allows specifying the types of data being passed around within the code, 
2)It has the ability to report errors when the types don't match.
For example, TypeScript will report an error when passing a string into a function that expects a number.
3)TypeScript uses compile time type checking. Which means it checks if the specified types match before running the code.
How do I use TypeScript?
-A common way to use TypeScript is to use the official TypeScript compiler, 
which transpiles TypeScript code into JavaScript.
-TypeScript being converted into JavaScript means it runs anywhere that JavaScript runs!
    Installing the Compiler
-TypeScript has an official compiler which can be installed through npm.
-Within your npm project, run the following command to install the compiler:
npm install typescript --save-dev
npx tsc
-after running the two commands, you'll get the version of tsc and Followed by a list of all the Common Commands.
    Configuring the compiler
By default the TypeScript compiler will print a help message when run in an empty project.
The compiler can be configured using a tsconfig.json file.
You can have TypeScript create tsconfig.json with the recommended settings with:
npx tsc --init

A)   TypeScript Simple Types
TypeScript supports some simple types (primitives) you may know.
1)boolean - true or false values
2)number - whole numbers and floating point values(decimals).
3)string - text values like "TypeScript Rocks".
4)bigint -  whole numbers and floating point values, but allows larger negative and positive numbers than the number type.
5)symbol - are used to create a globally unique identifier.
    Type Assignment
When creating a variable, there are two main ways TypeScript assigns a type:
1)Explicit - writing out the type.
Explicit type assignment are easier to read and more intentional.
2)Implicit - TypeScript will "guess" the type, based on the assigned value.
Error In Type Assignment
TypeScript will throw an error if data types do not match.
     Unable to Infer
Having TypeScript "guess" the type of a value is called "infer"
TypeScript may not always properly infer what the type of a variable may be. 
In such cases, it will set the type to "any" which disables type checking.

This behavior can be disabled by enabling "noImplicitAny" as an option in a TypeScript's project tsconfig.json.
That is a JSON config file for customizing how some of TypeScript behaves.

B)  TypeScript Special Types
TypeScript has special types that may not refer to any specific type of data.
1)Type: any -This is a type that disables type checking and effectively allows all types to be used.
any can be a useful way to get past errors since it disables type checking,
but TypeScript will not be able provide type safety, and tools which rely on type data, 
such as auto completion, will not work. Remember, it should be avoided at "any" cost...
2)Type: unknown - unknown is a similar, but safer alternative to any.
TypeScript will prevent unknown types from being used.
unknown is best used when you don't know the type of data being typed. To add a type later, you'll need to cast it.
Casting is when we use the "as" keyword to say property or variable is of the casted type.
3)Type: never - never effectively throws an error whenever it is defined.
never is rarely used, especially by itself, its primary use is in advanced generics.
4)Type: undefined & null - undefined and null are types that refer to the JavaScript primitives 
undefined and null respectively.
These types don't have much use unless strictNullChecks is enabled in the tsconfig.json file.

    Arrays
TypeScript has a specific syntax for typing arrays.
The 'readonly' keyword can prevent arrays from being changed.
TypeScript can infer(guess) the type of an array if it has values.

    Tuples
A tuple is a typed array with a pre-defined length and types for each index.
Tuples are great because they allow each element in the array to be a known type of value.
To define a tuple, specify the type of each element in the array.
Readonly Tuple
A good practice is to make your tuple readonly.
Named Tuples
Named tuples allow us to provide context for our values at each index.
Destructuring Tuples
Since tuples are arrays we can also destructure them.

    Object Types
TypeScript has a specific syntax for typing objects.
Type Inference
TypeScript can infer the types of properties based on their values.
Optional Properties(?)
Optional properties are properties that don't have to be defined in the object definition.
Index Signatures
Index signatures can be used for objects without a defined list of properties.


