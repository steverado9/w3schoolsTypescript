    Introduction To Typescript
TypeScript is JavaScript with added syntax for types that makes it static.
Why should I use TypeScript?
1)TypeScript allows specifying the types of data being passed around within the code, 
2)It has the ability to report errors when the types don't match.
For example, TypeScript will report an error when passing a string into a function that expects a number.
3)TypeScript uses compile time type checking. Which means it checks if the specified types match before running the code.
How do I use TypeScript?
-A common way to use TypeScript is to use the official TypeScript compiler, 
which transpiles TypeScript code into JavaScript.
-TypeScript being converted into JavaScript means it runs anywhere that JavaScript runs!
    Installing the Compiler
-TypeScript has an official compiler which can be installed through npm.
-Within your npm project, run the following command to install the compiler:
npm install typescript --save-dev
npx tsc
-after running the two commands, you'll get the version of tsc and Followed by a list of all the Common Commands.
    Configuring the compiler
By default the TypeScript compiler will print a help message when run in an empty project.
The compiler can be configured using a tsconfig.json file.
You can have TypeScript create tsconfig.json with the recommended settings with:
npx tsc --init

A)   TypeScript Simple Types
TypeScript supports some simple types (primitives) you may know.
1)boolean - true or false values
2)number - whole numbers and floating point values(decimals).
3)string - text values like "TypeScript Rocks".
4)bigint -  whole numbers and floating point values, but allows larger negative and positive numbers than the number type.
5)symbol - are used to create a globally unique identifier.
    Type Assignment
When creating a variable, there are two main ways TypeScript assigns a type:
1)Explicit - writing out the type.
Explicit type assignment are easier to read and more intentional.
2)Implicit - TypeScript will "guess" the type, based on the assigned value.
Error In Type Assignment
TypeScript will throw an error if data types do not match.
     Unable to Infer
Having TypeScript "guess" the type of a value is called "infer"
TypeScript may not always properly infer what the type of a variable may be. 
In such cases, it will set the type to "any" which disables type checking.

This behavior can be disabled by enabling "noImplicitAny" as an option in a TypeScript's project tsconfig.json.
That is a JSON config file for customizing how some of TypeScript behaves.

B)  TypeScript Special Types
TypeScript has special types that may not refer to any specific type of data.
1)Type: any -This is a type that disables type checking and effectively allows all types to be used.
any can be a useful way to get past errors since it disables type checking,
but TypeScript will not be able provide type safety, and tools which rely on type data, 
such as auto completion, will not work. Remember, it should be avoided at "any" cost...
2)Type: unknown - unknown is a similar, but safer alternative to any.
TypeScript will prevent unknown types from being used.
unknown is best used when you don't know the type of data being typed. To add a type later, you'll need to cast it.
Casting is when we use the "as" keyword to say property or variable is of the casted type.
3)Type: never - never effectively throws an error whenever it is defined.
never is rarely used, especially by itself, its primary use is in advanced generics.
4)Type: undefined & null - undefined and null are types that refer to the JavaScript primitives 
undefined and null respectively.
These types don't have much use unless strictNullChecks is enabled in the tsconfig.json file.

    Arrays
TypeScript has a specific syntax for typing arrays.
The 'readonly' keyword can prevent arrays from being changed.
TypeScript can infer(guess) the type of an array if it has values.

    Tuples
A tuple is a typed array with a pre-defined length and types for each index.
Tuples are great because they allow each element in the array to be a known type of value.
To define a tuple, specify the type of each element in the array.
Readonly Tuple
A good practice is to make your tuple readonly.
Named Tuples
Named tuples allow us to provide context for our values at each index.
Destructuring Tuples
Since tuples are arrays we can also destructure them.

    Object Types
TypeScript has a specific syntax for typing objects.
Type Inference
TypeScript can infer the types of properties based on their values.
Optional Properties(?)
Optional properties are properties that don't have to be defined in the object definition.
Index Signatures
Index signatures can be used for objects without a defined list of properties.

    Enums
An enum is a special "class" that represents a group of constants (unchangeable variables).
Enums come in two flavors string and numeric.
-Numeric Enums - Default
By default, enums will initialize the first value to 0 and add 1 to each additional value.
-Numeric Enums - Initialized
You can set the value of the first numeric enum and have it auto increment from that
-Numeric Enums - Fully Initialized
You can assign unique number values for each enum value.
Then the values will not incremented automatically
-String Enums
Enums can also contain strings. This is more common than numeric enums, because of their readability and intent.

  Aliases and Interfaces
TypeScript allows types to be defined separately from the variables that use them.
Aliases and Interfaces allows types to be easily shared between different variables/objects.
-Aliases
Type Aliases allow defining types with a custom name (an Alias).
Type Aliases can be used for primitives like string or more complex types such as objects and arrays.
-Interfaces
Interfaces are similar to type aliases, except they only apply to object types.
Interfaces can extend each other's definition.
Extending an interface means you are creating a new interface with the same properties as the original,
plus something new.

    Union Types( | )
Union types are used when a value can be more than a single type.
Such as when a property would be string or number.
Using the | we are saying our parameter is a string or number.
you need to know what your type is when union types are being used to avoid type errors

    Functions
-TypeScript has a specific syntax for typing function parameters and return values.
-Return Type
The type of the value returned by the function can be explicitly defined.
If no return type is defined, 
-TypeScript will attempt to infer(guess) it through the types of the variables or expressions returned.
-The type 'void' can be used to indicate a function doesn't return any value.
-Function parameters are typed with a similar syntax as variable declarations
-Optional Parameters(?)
By default TypeScript will assume all parameters are required, but they can be explicitly marked as optional.
-For parameters with default values, the default value goes after the type annotation.
-Typing named parameters follows the same pattern as typing normal parameters.
-Rest parameters can be typed like normal parameters, but the type must be an array as rest parameters are always arrays.
-Type Alias
Function types can be specified separately from functions with type aliases.
These types are written similarly to arrow functions, read more about arrow functions here.

    Casting
Casting is the process of overriding a type.
    Casting with as
A straightforward way to cast a variable is using the 'as' keyword, 
which will directly change the type of the given variable.
    Casting with <>
Using <> works the same as casting with as.
    Force casting
To override type errors that TypeScript may throw when casting, first cast to unknown, then to the target type.

    TypeScript Classes
TypeScript adds types and visibility modifiers to JavaScript classes.
-The members of a class (properties & methods) are typed using type annotations, similar to variables
-Class members also be given special modifiers which affect visibility.
There are three main visibility modifiers in TypeScript.
1)public - (default) allows access to the class member from anywhere.
2)private - only allows access to the class member from within the class.
3)protected - allows access to the class member from itself and any classes that inherit it.

-TypeScript provides a convenient way to define class members in the constructor, by adding a visibility modifiers to the parameter.
-Similar to arrays, the readonly keyword can prevent class members from being changed.
-Classes can extend each other through the extends keyword. A class can only extends one other class.

    TypeScript Basic Generics
Generics allow creating 'type variables' which can be used to create classes, functions & type aliases that don't need to explicitly
define the types that they use.
-Generics with functions help make more generalized methods which more accurately represent the types used and returned.
-Generics can be used to create generalized classes, like Map.
-Generics in type aliases allow creating types that are more reusable.

    TypeScript Utility Types
TypeScript comes with a large number of types that can help with some common type manipulation,
usually referred to as utility types.
-Partial changes all the properties in an object to be optional.
-Required changes all the properties in an object to be required.
-Record is a shortcut to defining an object type with a specific key type and value type.
-Omit removes keys from an object type.
-Pick removes all but the specified keys from an object type.
-Exclude removes types from a union.
-ReturnType extracts the return type of a function type.
-Parameters extracts the parameter types of a function type as an array.
-Readonly is used to create a new type where all properties are readonly, 
meaning they cannot be modified once assigned a value.

    TypeScript Keyof
keyof is a keyword in TypeScript which is used to extract the key type from an object type.
When used on an object type with explicit keys, keyof creates a union type with those keys.
-keyof can also be used with index signatures to extract the index type.

    TypeScript Null & Undefined
TypeScript has a powerful system to deal with null or undefined values.
null and undefined are primitive types and can be used like other types, such as string.
    Optional Chaining
Optional Chaining is a JavaScript feature that works well with TypeScript's null handling. 
It allows accessing properties on an object, that may or may not exist, with a compact syntax. 
It can be used with the ?. operator when accessing properties.
    Nullish Coalescence
Nullish Coalescence is another JavaScript feature that also works well with TypeScript's null handling. 
It allows writing expressions that have a fallback specifically when dealing with null or undefined. 
This is useful when other falsy values can occur in the expression but are still valid. 
It can be used with the ?? operator in an expression, similar to using the && operator.
    Null Assertion
TypeScript's inference system isn't perfect, there are times when it makes sense to ignore a value's possibility of being null or undefined. 
An easy way to do this is to use casting, but TypeScript also provides the ! operator as a convenient shortcut.
    Array bounds handling
Even with strictNullChecks enabled, by default TypeScript will assume array access will never return undefined 
(unless undefined is part of the array type).
The config noUncheckedIndexedAccess can be used to change this behavior.

    TypeScript Definitely Typed
NPM packages in the broad JavaScript ecosystem doesn't always have types available.

Sometimes the projects are no longer maintained, and other times they aren't interested in, 
agree with, or have time to use TypeScript.
    Using non-typed NPM packages in TypeScript
Using untyped NPM packages with TypeScript will not be type safe due to lack of types.

To help TypeScript developers use such packages, there is a community maintained project called Definitely Typed.

Definitely Typed is a project that provides a central repository of TypeScript definitions for NPM packages which do not have types.
npm install --save-dev @types/jquery

    TypeScript 5.x Updates
TypeScript is actively maintained and updated by Microsoft. In version 5.x a lot of utility and quality of life updates were made.
    Template Literal Types
Template Literal Types now allows us to create more precise types using template literals. We can define custom types that depend on the actual values of strings at compile time.
    Index Signature Labels
Index Signature Labels allows us to label index signatures using computed property names. It helps in providing more descriptive type information when working with dynamic objects.



